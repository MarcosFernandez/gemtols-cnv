#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <math.h>

using namespace std;

static std::vector<std::string> split(std::string s, char delim, std::vector<std::string> elems)
{
	std::stringstream ss(s);
	std::string item;
	while(std::getline(ss, item, delim)) {
		elems.push_back(item);
	}
	return elems;
}

static std::vector<std::string> split(const std::string &s, char delim)
{
	std::vector<std::string> elems;
	return split(s, delim, elems);
}

/**
 * \brief Print Help File
 */
void printHelp()
{
    cout << "kmerCount Get kmer mappings for those regions with no Ns in the sequences and at least 2 hits" << endl;
    cout << "USAGE: kmerCount kmersMap kmerCount" << endl;
    cout << "    kmerCount: Path to map file generated by gem" << endl;
    cout << "    kmerCount: Kmer Counts output" << endl;
}

/**
 * \brief Check N existance in a sequence
 */
bool areNs(const string & line)
{    
  std::size_t foundN = line.find("N");
  
  if (foundN!=std::string::npos)
  {
      return true;
  }

  foundN = line.find("n");
  
  if (foundN!=std::string::npos)
  {
      return true;
  }
  
  return false;
}

/**
 * \brief main function
 */
int main(int argc, char *argv[])
{
    //1.TEST ARGUMENTS
    if(argc != 3)
    {
        printHelp();
        return 0;
    }

    //2.ARGUMENTS
    string sKmersMap = argv[1];
    string skmerCount = argv[2];

    //3. PARSE MAPPING FILE
    ofstream outFile;
    outFile.open (skmerCount.c_str());

    ifstream mapFile;
    mapFile.open(sKmersMap.c_str());
    string lineRead = "";
    
    if (mapFile.is_open())
    {
        if (mapFile.good())
        {
            getline (mapFile,lineRead);
        }

        while (!lineRead.empty())
        {
             vector<string> fields = split(lineRead, '\t');
             //Process those sequences without Ns
             if (!areNs(fields[1]))
             {
                 vector<string> stratas = split(fields[3], ':'); 
                 unsigned int mappings = atoi(stratas[0].c_str());
                 //If the kmer sequences has been mapped more than two times
                 if (mappings > 1)
                 {
                     vector <string> location =  split(fields[0], ':');
                     string chrom = location[0];
                     vector <string> coords = split(location[1], '-');
                     string start = coords[0];
                     string end = coords[1];
                     outFile << chrom +"\t"+ start +"\t"+ end +"\t"+ fields[1] + "\t";
                     outFile << mappings;
                     outFile << endl;
                }
             }

	     getline (mapFile,lineRead);
	}
    }

    mapFile.close();
    outFile.close();
}


